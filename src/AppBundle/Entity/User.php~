<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use HWI\Bundle\OAuthBundle\Security\Core\User\OAuthUser;

/**
 * User
 *
 * @ORM\Table(name="user")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\UserRepository")
 */
class User extends OAuthUser implements \Serializable
{
    CONST PREMIUM = 'premium';
    CONST FREE = 'free';

    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="spotify_id", type="string", length=255, unique=true)
     */
    private $spotifyId;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255)
     */
    private $name;

    /**
     * @ORM\Column(name="is_active", type="boolean")
     */
    private $isActive;

    /**
     * @ORM\Column(name="is_premium", type="boolean")
     */
    private $isPremium;

    public function __construct($username, $realName, $productType)
    {
        $this->isActive = true;
        parent::__construct($username);
        $this->setSpotifyId($username);
        $this->setName($realName);
        $this->setIsPremium($productType);

    }


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set spotifyId
     *
     * @param string $spotifyId
     *
     * @return User
     */
    public function setSpotifyId($spotifyId)
    {
        $this->spotifyId = $spotifyId;

        return $this;
    }

    /**
     * Get spotifyId
     *
     * @return string
     */
    public function getSpotifyId()
    {
        return $this->spotifyId;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return User
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    public function getRoles()
    {
        return array('ROLE_USER');
    }

    public function eraseCredentials()
    {
    }

    public function getSalt()
    {
        // you *may* need a real salt depending on your encoder
        // see section on salt below
        return null;
    }

    /** @see \Serializable::serialize() */
    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->username,
            // see section on salt below
            // $this->salt,
        ));
    }

    /** @see \Serializable::unserialize() */
    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->username,
            // see section on salt below
            // $this->salt
            ) = unserialize($serialized);
    }

    /**
     * Set isActive
     *
     * @param boolean $isActive
     *
     * @return User
     */
    public function setIsActive($isActive)
    {
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * Get isActive
     *
     * @return boolean
     */
    public function getIsActive()
    {
        return $this->isActive;
    }

    /**
     * Set isPremium
     *
     * @param boolean $isPremium
     *
     * @return User
     */
    public function setIsPremium($isPremium)
    {
        if (self::PREMIUM === $isPremium) {
            $this->isPremium = true;
        } else{
            $this->isPremium = false;
        }

        return $this;
    }

    /**
     * Get isPremium
     *
     * @return boolean
     */
    public function getIsPremium()
    {
        return $this->isPremium;
    }

    /**
     * Set countOfTracks
     *
     * @param integer $countOfTracks
     *
     * @return User
     */
    public function setCountOfTracks($countOfTracks)
    {
        $this->countOfTracks = $countOfTracks;

        return $this;
    }

    /**
     * Get countOfTracks
     *
     * @return integer
     */
    public function getCountOfTracks()
    {
        return $this->countOfTracks;
    }
}
